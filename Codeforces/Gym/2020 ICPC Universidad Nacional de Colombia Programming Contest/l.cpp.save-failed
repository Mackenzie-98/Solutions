#include <bits/stdc++.h>

using namespace std;

#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define sz(x) (int)(x).size()
#define F first
#define S second
#define forn(i, n) for (int i = 0; i < (int)n; i++)
#define pb push_back
#define eb emplace_back
#define fastIO ios::sync_with_stdio(0), cin.tie(0)
#define endl '\n'
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
void debug_out() {
    cerr << endl;
}
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H), debug_out(T...);
}

struct edge {
    int v;
    long long w;
    edge(int _v, int _w) {
        v = _v;
        w = _w;
    }
    bool operator < (const edge &b) const {
        return w > b.w; //Orden invertido
    }
};
const int MAX = 4e6 + 10;
bitset<MAX> vis;
int pre[MAX];
vector<edge> g[MAX];
int n, m;
ll dist[MAX];
#define INF (1ll<<62)

void dijkstra(int u) {
    priority_queue<edge> pq;
    pq.push({u, 0});
    dist[u] = 0;
    while (pq.size()) {
        u = pq.top().v;
        pq.pop();
        if (!vis[u]) {
            vis[u] = true;
            for (auto nx : g[u]) {
                int v = nx.v;
                if(!vis[v] && dist[v] > dist[u] + nx.w) {
                    dist[v] = dist[u] + nx.w;
                    pre[v] = u;
                    pq.push({v, dist[v]});
                }
            }
        }
    }
}

void init() {
    for(int i = 0; i <= n * m + 1; i++) {
        pre[i] = -1;
        g[i].clear();
        dist[i] = INF;
        vis[i] = false;
    }
}
int main() {
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
    freopen("in.txt", "r", stdin);
    // freopen("out.txt", "w", stdout);
#else
#define debug(...) 3
    fastIO;
#endif
    cin >> n >> m;
    vector<string> v(n);
    forn(i, n)cin >> v[i];
    int l[n + 4][m + 4], r[n + 4][m + 4], u[n + 4][m + 4], d[n + 4][m + 4];
    memset(l, 0, sizeof l);
    memset(r, 0, sizeof r);
    memset(u, 0, sizeof u);
    memset(d, 0, sizeof d);
    int ini = 0, fin = 0;
    init();
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            if(v[i - 1][j - 1] == 'S')ini = (i - 1) * m + j - 1;
            if(v[i - 1][j - 1] == 'E')fin = (i - 1) * m + j - 1;
            if(v[i - 1][j - 1] == 'X')l[i][j] = l[i][j - 1] + 1;
            else l[i][j] = 0;
        }
    }
    for(int i = 1; i <= n; i++) {
        for(int j = m; j >= 1; j--) {
            if(v[i - 1][j - 1] == 'X')r[i][j] = r[i][j + 1] + 1;
            else r[i][j] = 0;
        }
    }
    for(int j = 1; j <= m; j++) {
        for(int i = 1; i <= n; i++) {
            if(v[i - 1][j - 1] == 'X')u[i][j] = u[i - 1][j] + 1;
            else u[i][j] = 0;
        }
    }
    for(int j = 1; j <= m; j++) {
        for(int i = n; i >= 1; i--) {
            if(v[i - 1][j - 1] == 'X')d[i][j] = d[i + 1][j] + 1;
            else d[i][j] = 0;
        }
    }
    forn(i, n) {
        forn(j, m) {
            if(v[i][j] != 'X') {
                int cur = i * m + j;
                //Con espacios sucios entre sí
                int rr = r[i + 1][j + 2] + 1, dd = d[i + 2][j + 1] + 1;
                if(j + rr < m && v[i][j + rr] != 'X')
                    g[cur].pb(edge(cur + rr, 3)), g[cur + rr].pb(edge(cur, 2));
                if(i + dd < n && v[i + dd][j] != 'X')
                    g[cur].pb(edge(cur + dd * m, 1)), g[cur + dd * m].pb(edge(cur, 4));
            }
        }
    }
    /*forn(i, n * m) {
        cout << "Nodo: " << i + 1 << endl;
        for(auto x : g[i])cout << x.v + 1 << " " << endl;
        cout << endl;
    }*/
    dijkstra(ini);
    if(dist[fin] != INF) {
        string path = "";
        int cur = pre[fin], aux = fin;
        while(cur != -1) {
            debug(aux+1,cur+1);
            int i = aux / m;
            int j = aux - i * m;
            int rr = r[i + 1][j + 2] + 1, dd = d[i + 2][j + 1] + 1;
            if(aux + rr == cur)path += 'L';
            else if(cur - rr == aux)path += 'R';
            else if(aux-m*dd == cur )path += 'D';
            else path += 'U';
            aux = cur;
            cur = pre[cur];
        }
        cout << sz(path) << endl;
        reverse(all(path));
        cout << path << endl;
    } else cout << -1 << endl;
    return 0;
}
